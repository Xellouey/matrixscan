#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Web App - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Ç–µ–π
Standalone –≤–µ—Ä—Å–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç Telegram –±–æ—Ç–∞
"""

from flask import Flask, render_template_string, jsonify, request, send_from_directory
import os
import json
from datetime import datetime, date
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Vercel
try:
    from database_demo import get_checked_stores_for_date, get_all_regions, get_networks_by_region, get_stores_by_network, get_last_price_in_network, save_price_check, get_price_check
    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
except ImportError:
    from database import get_checked_stores_for_date, get_all_regions, get_networks_by_region, get_stores_by_network, get_last_price_in_network, save_price_check, get_price_check
    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-here'

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Web App"""
    try:
        with open('index.html', 'r', encoding='utf-8') as f:
            html_content = f.read()
        return html_content
    except FileNotFoundError:
        return "Web App —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

@app.route('/manifest.json')
def manifest():
    """PWA Manifest —Ñ–∞–π–ª"""
    try:
        with open('manifest.json', 'r', encoding='utf-8') as f:
            manifest_content = f.read()
        return manifest_content, 200, {'Content-Type': 'application/json'}
    except FileNotFoundError:
        return "Manifest –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

@app.route('/sw.js')
def service_worker():
    """Service Worker —Ñ–∞–π–ª"""
    try:
        with open('sw.js', 'r', encoding='utf-8') as f:
            sw_content = f.read()
        return sw_content, 200, {'Content-Type': 'application/javascript'}
    except FileNotFoundError:
        return "Service Worker –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

@app.route('/icon-<int:size>.png')
def pwa_icon(size):
    """PWA –∏–∫–æ–Ω–∫–∏"""
    try:
        return send_from_directory('.', f'icon-{size}.png')
    except FileNotFoundError:
        return "–ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

@app.route('/icon-<int:size>-maskable.png')
def pwa_maskable_icon(size):
    """PWA maskable –∏–∫–æ–Ω–∫–∏"""
    try:
        return send_from_directory('.', f'icon-{size}-maskable.png')
    except FileNotFoundError:
        return "Maskable –∏–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

@app.route('/test')
def test_page():
    """–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return '''
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ Excel –æ—Ç—á–µ—Ç–∞</title>
</head>
<body>
    <h1>üß™ –¢–µ—Å—Ç API –∏ Excel –æ—Ç—á–µ—Ç–∞</h1>
    <button onclick="testButton()" style="padding: 20px; font-size: 16px; background: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer; margin: 10px;">
        üì§ –¢–µ—Å—Ç save-and-send
    </button>
    <button onclick="testExcel()" style="padding: 20px; font-size: 16px; background: #FF9800; color: white; border: none; border-radius: 5px; cursor: pointer; margin: 10px;">
        üìä –¢–µ—Å—Ç Excel –æ—Ç—á–µ—Ç–∞
    </button>
    <div id="result" style="margin-top: 20px; padding: 10px; background: #f0f0f0; font-family: monospace;"></div>
    
    <script>
        function log(msg) {
            document.getElementById('result').innerHTML += msg + '<br>';
        }
        
        function clear() {
            document.getElementById('result').innerHTML = '';
        }
        
        async function testButton() {
            clear();
            log('üñ±Ô∏è –¢–µ—Å—Ç save-and-send –Ω–∞—á–∞—Ç!');
            
            try {
                const response = await fetch('/api/save-and-send', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        store_id: 1,
                        store_name: '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω',
                        checked_items: ['—Ç–æ–≤–∞—Ä1', '—Ç–æ–≤–∞—Ä2'],
                        total_items: 10
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    log('‚úÖ save-and-send —Ä–∞–±–æ—Ç–∞–µ—Ç: ' + data.message);
                } else {
                    log('‚ùå –û—à–∏–±–∫–∞ save-and-send: ' + data.error);
                }
                
            } catch (error) {
                log('üí• –û—à–∏–±–∫–∞: ' + error.message);
            }
        }
        
        async function testExcel() {
            clear();
            log('üìä –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞ –Ω–∞—á–∞—Ç!');
            
            try {
                const response = await fetch('/api/send-to-telegram', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        message: '–¢–µ—Å—Ç Excel –æ—Ç—á–µ—Ç–∞',
                        store_id: 1,
                        store_name: '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω'
                    })
                });
                
                log('üì• –û—Ç–≤–µ—Ç: HTTP ' + response.status);
                
                const data = await response.json();
                log('üìÑ –î–∞–Ω–Ω—ã–µ: ' + JSON.stringify(data, null, 2));
                
                if (data.success && data.report_file) {
                    log('‚úÖ Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ' + data.report_file);
                } else {
                    log('‚ùå Excel –æ—Ç—á–µ—Ç –ù–ï —Å–æ–∑–¥–∞–Ω');
                }
                
            } catch (error) {
                log('üí• –û—à–∏–±–∫–∞: ' + error.message);
            }
        }
        
        log('üöÄ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        log('üìã –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    </script>
</body>
</html>
    '''

@app.route('/api/save-and-send', methods=['POST'])
def save_and_send():
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = request.get_json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not data:
            return jsonify({
                'success': False,
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
            }), 400
            
        store_id = data.get('store_id')
        store_name = data.get('store_name')
        checked_items = data.get('checked_items', [])
        total_items = data.get('total_items', 0)
        
        if not store_id or not store_name:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞'
            }), 400
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_name} (ID: {store_id}): {len(checked_items)}/{total_items}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        try:
            from database_demo import record_check_results, get_nomenclature_by_store_id
        except ImportError:
            from database import record_check_results, get_nomenclature_by_store_id
        from datetime import date
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞
            all_nomenclature = get_nomenclature_by_store_id(store_id)
            all_products = [item[0] for item in all_nomenclature]  # item[0] —ç—Ç–æ product_name
            
            if not all_products:
                return jsonify({
                    'success': False,
                    'error': f'–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }), 404
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            today = date.today()
            record_check_results(store_id, all_products, set(checked_items), today)
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_id}")
            
            return jsonify({
                'success': True,
                'message': f'–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_name}. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(checked_items)} –∏–∑ {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤'
            })
            
        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(db_error)}'
            }), 500
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_and_send: {e}")
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/send-to-telegram', methods=['POST'])
def send_to_telegram():
    """API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤ –≤ Telegram"""
    try:
        # –ò–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        try:
            from database_demo import create_store_report
        except ImportError:
            from database import create_store_report
        from datetime import date
        import os
        
        data = request.get_json()
        message = data.get('message', '')
        store_id = data.get('store_id')
        store_name = data.get('store_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω')
        inspector_name = data.get('inspector_name', '')
        comment = data.get('comment', '')
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_name} (–ø—Ä–æ–≤–µ—Ä–∏–ª: {inspector_name})")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
        store_info = get_store_details(store_id)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º
        if store_info:
            enhanced_message = f"""üìã –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã

üè™ –ú–∞–≥–∞–∑–∏–Ω: {store_info.get('name', store_name)}
üìç –ê–¥—Ä–µ—Å: {store_info.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}
üÜî ID –º–∞–≥–∞–∑–∏–Ω–∞: {store_id}
üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {date.today().strftime('%d.%m.%Y')}
üë§ –ü—Ä–æ–≤–µ—Ä–∏–ª: {inspector_name}
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"""
            
            if comment:
                enhanced_message += f"\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
                
            message = enhanced_message
        
        # –°–æ–∑–¥–∞–µ–º Excel –æ—Ç—á–µ—Ç
        
        try:
            today = date.today()
            report_filename = create_store_report(store_id, today, store_name)
            
            if report_filename and os.path.exists(report_filename):
                logger.info(f"Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_filename}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                telegram_success = send_report_to_telegram(report_filename, message, comment)
                
                if telegram_success:
                    return jsonify({
                        'success': True,
                        'message': f'–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram: {os.path.basename(report_filename)}',
                        'report_file': report_filename
                    })
                else:
                    return jsonify({
                        'success': True,
                        'message': f'–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram: {os.path.basename(report_filename)}',
                        'report_file': report_filename
                    })
            else:
                return jsonify({
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç'
                }), 500
                
        except Exception as report_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {report_error}")
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(report_error)}'
            }), 500
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_to_telegram: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

def send_report_to_telegram(report_filename, message, comment):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Telegram –≥—Ä—É–ø–ø—É"""
    try:
        import requests
        import os
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
        BOT_TOKEN = os.getenv('BOT_TOKEN')
        CHAT_ID = os.getenv('MAIN_GROUP_ID')
        
        if not BOT_TOKEN or not CHAT_ID:
            logger.warning("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã BOT_TOKEN –∏–ª–∏ MAIN_GROUP_ID –≤ .env —Ñ–∞–π–ª–µ")
            logger.info(f"–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {report_filename}")
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            if comment:
                logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(report_filename, 'rb') as file:
            files = {'document': file}
            data = {
                'chat_id': CHAT_ID,
                'caption': message
            }
            
            response = requests.post(
                f'https://api.telegram.org/bot{BOT_TOKEN}/sendDocument',
                files=files,
                data=data,
                timeout=30
            )
            
            if response.status_code == 200:
                logger.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {response.text}")
                return False
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def get_store_addresses_from_excel():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∞–¥—Ä–µ—Å–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤ (–¥–µ–º–æ –≤–µ—Ä—Å–∏—è)"""
    try:
        # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–∞–±–æ—Ç–∞ —Å Excel —Ñ–∞–π–ª–∞–º–∏
        logging.info("–î–µ–º–æ —Ä–µ–∂–∏–º: –∞–¥—Ä–µ—Å–∞ –∏–∑ Excel –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return {}
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ Excel: {e}")
        return {}

def get_store_details(store_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ Excel —Ñ–∞–π–ª–æ–≤"""
    try:
        try:
            from database_demo import DEMO_STORES, DEMO_NETWORKS
            # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            store_data = next((s for s in DEMO_STORES if s[0] == store_id), None)
            if not store_data:
                return None
                
            network_data = next((n for n in DEMO_NETWORKS if n[0] == store_data[3]), None)
            network_name = network_data[1] if network_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å"
            
            store_info = {
                'name': store_data[1],
                'address': store_data[2] or '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
                'network_name': network_name,
                'region_name': '–°–ó–§–û'
            }
            
        except ImportError:
            from database import cursor
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î
            cursor.execute("""
                SELECT s.number as name, s.address, n.name as network_name
                FROM stores s
                LEFT JOIN networks n ON s.network_id = n.id  
                WHERE s.id = ?
            """, (store_id,))
            
            result = cursor.fetchone()
            
            if not result:
                return None
                
            store_info = {
                'name': result['name'],
                'address': result['address'] or '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
                'network_name': result['network_name'],
                'region_name': '–°–ó–§–û'  # –ò–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤ –≤–∏–¥–Ω–æ —á—Ç–æ —ç—Ç–æ –°–ó–§–û
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
            store_addresses = get_store_addresses_from_excel()
            if store_id in store_addresses:
                store_info['address'] = store_addresses[store_id]
                logger.info(f"–ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_id}: {store_addresses[store_id]}")
        
        return store_info
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ {store_id}: {e}")
        return None

@app.route('/api/create-excel-report', methods=['POST'])
def create_professional_excel_report():
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –°–¢–†–û–ì–û –ó–ê–©–ò–©–ï–ù–ù–û–ì–û –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞"""
    try:
        from report_protection import create_protected_report_for_period
        from datetime import date
        import os
        
        data = request.get_json()
        store_id = data.get('store_id')
        store_name = data.get('store_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω')
        checked_items = data.get('checked_items', [])
        total_items = data.get('total_items', 0)
        
        if not store_id or not store_name:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞'
            }), 400
        
        logger.info(f"üõ°Ô∏è –°–¢–†–û–ì–û –ó–ê–©–ò–©–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_name} (ID: {store_id})")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        try:
            from database_demo import record_check_results, get_nomenclature_by_store_id
        except ImportError:
            from database import record_check_results, get_nomenclature_by_store_id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞
            all_nomenclature = get_nomenclature_by_store_id(store_id)
            all_products = [item[0] for item in all_nomenclature]  # item[0] —ç—Ç–æ product_name
            
            if not all_products:
                return jsonify({
                    'success': False,
                    'error': f'–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }), 404
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            today = date.today()
            record_check_results(store_id, all_products, set(checked_items), today)
            
            # –°–æ–∑–¥–∞–µ–º –¢–û–õ–¨–ö–û –°–¢–†–û–ì–û –ó–ê–©–ò–©–ï–ù–ù–´–ô –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            report_filename = create_protected_report_for_period(today, today)
            
            if report_filename and os.path.exists(report_filename):
                logger.info(f"‚úÖ –°–¢–†–û–ì–û –ó–ê–©–ò–©–ï–ù–ù–´–ô Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_filename}")
                
                return jsonify({
                    'success': True,
                    'message': f'–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {os.path.basename(report_filename)}',
                    'report_file': report_filename
                })
            else:
                return jsonify({
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel –æ—Ç—á–µ—Ç'
                }), 500
                
        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {db_error}")
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(db_error)}'
            }), 500
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_professional_excel_report: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/download-file')
def download_file():
    """API –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ –ø–æ–ª–Ω–æ–º—É –ø—É—Ç–∏"""
    try:
        file_path = request.args.get('file')
        
        if not file_path:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É'}), 400
        
        if not os.path.exists(file_path):
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø—É—Ç—å –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∏–º—è —Ñ–∞–π–ª–∞
        directory = os.path.dirname(file_path)
        filename = os.path.basename(file_path)
        
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {filename} –∏–∑ {directory}")
        return send_from_directory(directory, filename, as_attachment=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/regions')
def regions():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    try:
        regions_data = get_all_regions()
        
        return jsonify({
            'success': True,
            'regions': [
                {
                    'id': region[0],
                    'name': region[1],
                    'networks_count': len(get_networks_by_region(region[0])),
                    'stores_count': sum(len(get_stores_by_network(net[0])) 
                                      for net in get_networks_by_region(region[0]))
                }
                for region in regions_data
            ]
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ regions: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/networks/<int:region_id>')
def networks(region_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–π –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
    try:
        networks_data = get_networks_by_region(region_id)
        
        return jsonify({
            'success': True,
            'networks': [
                {
                    'id': network[0],
                    'name': network[1],
                    'stores_count': len(get_stores_by_network(network[0]))
                }
                for network in networks_data
            ]
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ networks: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/stores/<int:network_id>')
def stores(network_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ —Å–µ—Ç–∏ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –∏–∑ Excel"""
    try:
        stores_data = get_stores_by_network(network_id)
        checked_stores = get_checked_stores_for_date(date.today())
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
        store_addresses = get_store_addresses_from_excel()
        
        stores_list = []
        for store in stores_data:
            store_id = store[0]
            store_number = store[1]
            
            # –ò—â–µ–º –∞–¥—Ä–µ—Å –≤ Excel –¥–∞–Ω–Ω—ã—Ö
            address = store_addresses.get(store_id, store[2] if len(store) > 2 else '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            
            stores_list.append({
                'id': store_id,
                'number': store_number,
                'name': f"‚Ññ{store_number}",
                'address': address,
                'status': 'checked' if store_id in checked_stores else 'pending'
            })
        
        return jsonify({
            'success': True,
            'stores': stores_list
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stores: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/search-stores/<int:network_id>')
def search_stores(network_id):
    """API –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –∞–¥—Ä–µ—Å—É"""
    try:
        query = request.args.get('q', '').strip()
        
        if not query:
            return jsonify({
                'success': True,
                'stores': []
            })
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –∏–∑ database.py
        try:
            from database_demo import find_stores_in_network
        except ImportError:
            from database import find_stores_in_network
        stores_data = find_stores_in_network(network_id, query)
        checked_stores = get_checked_stores_for_date(date.today())
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
        store_addresses = get_store_addresses_from_excel()
        
        stores_list = []
        for store in stores_data:
            store_id = store['id']
            store_number = store['number']
            
            # –ò—â–µ–º –∞–¥—Ä–µ—Å –≤ Excel –¥–∞–Ω–Ω—ã—Ö
            address = store_addresses.get(store_id, store['address'] if store['address'] else '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            
            stores_list.append({
                'id': store_id,
                'number': store_number,
                'name': f"‚Ññ{store_number}",
                'address': address,
                'status': 'checked' if store_id in checked_stores else 'pending'
            })
        
        return jsonify({
            'success': True,
            'stores': stores_list
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ search_stores: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/nomenclature/<int:store_id>')
def nomenclature(store_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        try:
            from database_demo import get_nomenclature_by_store_id, get_checked_items_for_store_date
        except ImportError:
            from database import get_nomenclature_by_store_id, get_checked_items_for_store_date
        from datetime import date
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
        nomenclature_data = get_nomenclature_by_store_id(store_id)
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: get_nomenclature_by_store_id –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç sqlite3.Row –æ–±—ä–µ–∫—Ç—ã
        items = [item[0] for item in nomenclature_data]  # item[0] —ç—Ç–æ product_name
        
        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = date.today()
        checked_items = get_checked_items_for_store_date(store_id, today)
        
        return jsonify({
            'success': True,
            'items': items,
            'checked': list(checked_items)
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ nomenclature: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: {str(e)}'
        }), 500

@app.route('/api/today-report')
def today_report():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        today = date.today()
        checked_stores = get_checked_stores_for_date(today)
        
        if not checked_stores:
            return jsonify({
                'success': True,
                'date': today.strftime('%d.%m.%Y'),
                'stores_count': 0,
                'message': '–ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–æ–∫'
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö
        try:
            from database_demo import cursor, monitoring_checks, DEMO_STORES, DEMO_NETWORKS
            # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
            stores_info = []
            date_str = today.isoformat()
            
            for store_id in checked_stores:
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
                store_data = next((s for s in DEMO_STORES if s[0] == store_id), None)
                if not store_data:
                    continue
                    
                # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ç—å
                network_data = next((n for n in DEMO_NETWORKS if n[0] == store_data[3]), None)
                network_name = network_data[1] if network_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å"
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                store_checks = monitoring_checks.get(store_id, {})
                date_checks = store_checks.get(date_str, {})
                
                total_checks = len(date_checks)
                present_items = sum(1 for is_present in date_checks.values() if is_present)
                
                stores_info.append({
                    'id': store_id,
                    'number': store_data[1],
                    'address': store_data[2],
                    'network_name': network_name,
                    'total_checks': total_checks,
                    'present_items': present_items,
                    'completion_rate': round((present_items / total_checks) * 100, 1) if total_checks > 0 else 0
                })
                
        except ImportError:
            from database import cursor
            
            cursor.execute("""
                SELECT s.id, s.number, s.address, n.name as network_name,
                       COUNT(mc.id) as total_checks,
                       SUM(CASE WHEN mc.is_present = 1 THEN 1 ELSE 0 END) as present_items
                FROM stores s
                JOIN networks n ON s.network_id = n.id
                JOIN monitoring_checks mc ON s.id = mc.store_id
                WHERE mc.check_date = ? AND s.id IN ({})
                GROUP BY s.id, s.number, s.address, n.name
                ORDER BY s.number
            """.format(','.join('?' * len(checked_stores))), 
            [today] + list(checked_stores))
            
            stores_data = cursor.fetchall()
            
            stores_info = []
            for store in stores_data:
                stores_info.append({
                    'id': store['id'],
                    'number': store['number'],
                    'address': store['address'],
                    'network_name': store['network_name'],
                    'total_checks': store['total_checks'],
                    'present_items': store['present_items'],
                    'completion_rate': round((store['present_items'] / store['total_checks']) * 100, 1) if store['total_checks'] > 0 else 0
                })
        
        return jsonify({
            'success': True,
            'date': today.strftime('%d.%m.%Y'),
            'stores_count': len(checked_stores),
            'stores': stores_info,
            'total_checks': sum(store['total_checks'] for store in stores_info),
            'total_present': sum(store['present_items'] for store in stores_info)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ today_report: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}'
        }), 500

@app.route('/api/download-report')
def download_report():
    """API –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞"""
    try:
        store_id = request.args.get('store_id')
        report_date = request.args.get('date')
        
        if not store_id or not report_date:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã store_id –∏–ª–∏ date'}), 400
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        import glob
        import os
        
        logger.info(f"–ò—â–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_id} –∑–∞ –¥–∞—Ç—É {report_date}")
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ
        pattern = f"reports/–û—Ç—á–µ—Ç_*{report_date}*.xlsx"
        files = glob.glob(pattern)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '{pattern}': {len(files)}")
        for f in files:
            logger.info(f"  - {f}")
        
        if files:
            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            latest_file = max(files, key=os.path.getctime)
            logger.info(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {latest_file}")
            
            if os.path.exists(latest_file):
                # –†–∞–∑–¥–µ–ª—è–µ–º –ø—É—Ç—å –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∏–º—è —Ñ–∞–π–ª–∞
                directory = os.path.dirname(latest_file)
                filename = os.path.basename(latest_file)
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: {filename} –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory}")
                return send_from_directory(directory, filename, as_attachment=True)
            else:
                logger.error(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {latest_file}")
                return jsonify({'error': '–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ reports –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            all_files = glob.glob("reports/*.xlsx")
            logger.info(f"–í—Å–µ —Ñ–∞–π–ª—ã –≤ reports/: {all_files}")
            return jsonify({'error': f'–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–∞—Ç—Ç–µ—Ä–Ω: {pattern}'}), 404
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/generate-period-report', methods=['POST'])
def generate_period_report():
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –°–¢–†–û–ì–û –ó–ê–©–ò–©–ï–ù–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        from report_protection import create_protected_report_for_period
        from database import get_checked_stores_for_date
        from datetime import datetime
        import os
        
        data = request.get_json()
        start_date_str = data.get('start_date')
        end_date_str = data.get('end_date')
        
        if not start_date_str or not end_date_str:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞'
            }), 400
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        try:
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()
        except ValueError as e:
            return jsonify({
                'success': False,
                'error': f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {str(e)}'
            }), 400
        
        logger.info(f"üõ°Ô∏è –°–¢–†–û–ì–û –ó–ê–©–ò–©–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥
        from datetime import timedelta
        all_checked_stores = set()
        current_date = start_date
        while current_date <= end_date:
            checked_stores = get_checked_stores_for_date(current_date)
            all_checked_stores.update(checked_stores)
            current_date += timedelta(days=1)
        
        if not all_checked_stores:
            return jsonify({
                'success': False,
                'error': f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime("%d.%m.%Y")} –ø–æ {end_date.strftime("%d.%m.%Y")}'
            }), 404
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(all_checked_stores)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥")
        
        # –°–æ–∑–¥–∞–µ–º –¢–û–õ–¨–ö–û –°–¢–†–û–ì–û –ó–ê–©–ò–©–ï–ù–ù–´–ô –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_path = create_protected_report_for_period(start_date, end_date)
        logger.info(f"‚úÖ –°–¢–†–û–ì–û –ó–ê–©–ò–©–ï–ù–ù–´–ô –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–æ–∑–¥–∞–Ω: {report_path}")
        
        if os.path.exists(report_path):
            file_size = os.path.getsize(report_path)
            logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            if file_size == 0:
                logger.error("–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞")
                return jsonify({
                    'success': False,
                    'error': '–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞'
                }), 500
            
            return jsonify({
                'success': True,
                'message': f'–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime("%d.%m.%Y")} –ø–æ {end_date.strftime("%d.%m.%Y")}',
                'report_file': report_path,
                'stores_count': len(all_checked_stores)
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞'
            }), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_period_report: {e}")
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/api/download-period-report')
def download_period_report():
    """API –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        from database import create_report_for_period
        from datetime import datetime
        import os
        
        start_date_str = request.args.get('start_date')
        end_date_str = request.args.get('end_date')
        
        if not start_date_str or not end_date_str:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞'}), 400
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        try:
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()
        except ValueError as e:
            return jsonify({'error': f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {str(e)}'}), 400
        
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report_path = create_report_for_period(start_date, end_date)
        logger.info(f"–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")
        
        if os.path.exists(report_path):
            file_size = os.path.getsize(report_path)
            logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            if file_size == 0:
                logger.error("–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞")
                return jsonify({'error': '–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞'}), 500
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø—É—Ç—å –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∏–º—è —Ñ–∞–π–ª–∞
            directory = os.path.dirname(report_path)
            filename = os.path.basename(report_path)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: {filename} –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory}")
            return send_from_directory(directory, filename, as_attachment=True)
        else:
            logger.error(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {report_path}")
            return jsonify({'error': '–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/download-today-report')
def download_today_report():
    """API –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        from database import create_report_for_period
        from flask import Response
        import glob
        import os
        
        today = date.today()
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        checked_stores = get_checked_stores_for_date(today)
        if not checked_stores:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞'}), 404
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(checked_stores)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report_path = create_report_for_period(today, today)
        logger.info(f"–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")
        
        if os.path.exists(report_path):
            file_size = os.path.getsize(report_path)
            logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            if file_size == 0:
                logger.error("–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞")
                return jsonify({'error': '–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞'}), 500
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
            with open(report_path, 'rb') as f:
                file_data = f.read()
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã)
            download_filename = f"Report_today_{today.strftime('%Y-%m-%d')}.xlsx"
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: {download_filename}, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            response = Response(
                file_data,
                mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                headers={
                    'Content-Disposition': f'attachment; filename="{download_filename}"',
                    'Content-Length': str(len(file_data)),
                    'Cache-Control': 'no-cache',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'GET',
                    'Access-Control-Allow-Headers': 'Content-Type'
                }
            )
            
            return response
        else:
            logger.error(f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω: {report_path}")
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞'}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}'}), 500

@app.route('/api/send-today-report', methods=['POST'])
def send_today_report():
    """API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤ Telegram"""
    try:
        from database import create_report_for_period
        import os
        
        today = date.today()
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        checked_stores = get_checked_stores_for_date(today)
        if not checked_stores:
            return jsonify({
                'success': False,
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞'
            })
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report_path = create_report_for_period(today, today)
        logger.info(f"–û—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–∑–¥–∞–Ω: {report_path}")
        
        if os.path.exists(report_path):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
            return jsonify({
                'success': True,
                'message': f'–û—Ç—á–µ—Ç –∑–∞ {today.strftime("%d.%m.%Y")} –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
                'file_path': report_path,
                'stores_count': len(checked_stores)
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞'
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}'
        })

@app.route('/health')
def health_check():
    """API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        from database import cursor
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        cursor.execute("SELECT COUNT(*) as count FROM stores")
        stores_count = cursor.fetchone()['count']
        
        return jsonify({
            'status': 'healthy',
            'message': '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
            'database': 'connected',
            'stores_count': stores_count,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return jsonify({
            'status': 'unhealthy',
            'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}',
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/get-last-price', methods=['POST'])
def get_last_price_api():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –≤ —Å–µ—Ç–∏"""
    try:
        data = request.get_json()
        network_id = data.get('network_id')
        product_name = data.get('product_name')
        
        if not network_id or not product_name:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã network_id –∏–ª–∏ product_name'
            }), 400
        
        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product_name}' –≤ —Å–µ—Ç–∏ {network_id}")
        last_price = get_last_price_in_network(network_id, product_name)
        
        if last_price:
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: {last_price['regular_price']} —Ä—É–±.")
            return jsonify({
                'success': True,
                'price_data': {
                    'regular_price': last_price['regular_price'],
                    'promo_price': last_price['promo_price'],
                    'has_promo': last_price['has_promo'],
                    'check_date': last_price['check_date'],
                    'store_number': last_price['store_number']
                }
            })
        else:
            logger.info(f"–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product_name}'")
            return jsonify({
                'success': True,
                'price_data': None
            })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/save-price', methods=['POST'])
def save_price_api():
    """API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        data = request.get_json()
        
        required_fields = ['store_id', 'product_name']
        for field in required_fields:
            if field not in data:
                return jsonify({
                    'success': False,
                    'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}'
                }), 400
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –∏ –æ—Å—Ç–∞—Ç–∫–∏
        result = save_price_check(
            store_id=data['store_id'],
            product_name=data['product_name'],
            check_date=date.today(),
            regular_price=data.get('regular_price'),
            promo_price=data.get('promo_price'),
            has_promo=data.get('has_promo', False),
            stock_quantity=data.get('stock_quantity')
        )
        
        if result:
            return jsonify({
                'success': True,
                'message': '–¶–µ–Ω–∞ –∏ –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
            })
        else:
            return jsonify({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã'
            }), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/get-price', methods=['POST'])
def get_price_api():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        data = request.get_json()
        store_id = data.get('store_id')
        product_name = data.get('product_name')
        
        if not store_id or not product_name:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã store_id –∏–ª–∏ product_name'
            }), 400
        
        price_data = get_price_check(store_id, product_name, date.today())
        if price_data:
            return jsonify({
                'success': True,
                'price_data': {
                    'regular_price': price_data['regular_price'],
                    'promo_price': price_data['promo_price'],
                    'has_promo': price_data['has_promo'],
                    'price_notes': price_data['price_notes']
                }
            })
        else:
            return jsonify({
                'success': True,
                'price_data': None
            })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists('bot_database.db'):
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        exit(1)
    
    logger.info("–ó–∞–ø—É—Å–∫ Web App —Å–µ—Ä–≤–µ—Ä–∞...")
    logger.info("Web App –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.run(
        host='0.0.0.0',  # –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
        port=5000,       # –ü–æ—Ä—Ç 5000
        debug=False,     # –û—Ç–∫–ª—é—á–∞–µ–º debug –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        threaded=True    # –í–∫–ª—é—á–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
    )